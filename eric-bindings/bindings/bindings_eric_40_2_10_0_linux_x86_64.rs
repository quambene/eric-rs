/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EricInstanz {
    _unused: [u8; 0],
}
pub type EricInstanzHandle = *mut EricInstanz;
pub type byteChar = ::std::os::raw::c_char;
pub type BYTE = ::std::os::raw::c_uchar;
pub type EricZertifikatHandle = u32;
pub type EricTransferHandle = u32;
pub const eric_bearbeitung_flag_t_ERIC_VALIDIERE: eric_bearbeitung_flag_t = 2;
pub const eric_bearbeitung_flag_t_ERIC_SENDE: eric_bearbeitung_flag_t = 4;
pub const eric_bearbeitung_flag_t_ERIC_DRUCKE: eric_bearbeitung_flag_t = 32;
pub const eric_bearbeitung_flag_t_ERIC_PRUEFE_HINWEISE: eric_bearbeitung_flag_t = 128;
pub const eric_bearbeitung_flag_t_ERIC_VALIDIERE_OHNE_FREIGABEDATUM: eric_bearbeitung_flag_t = 256;
pub type eric_bearbeitung_flag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EricReturnBufferApi {
    _unused: [u8; 0],
}
pub type EricRueckgabepufferHandle = *mut EricReturnBufferApi;
pub type EricPdfCallback = ::std::option::Option<
    unsafe extern "C" fn(
        pdfBezeichner: *const ::std::os::raw::c_char,
        pdfDaten: *const BYTE,
        pdfGroesse: u32,
        benutzerDaten: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eric_druck_parameter_t {
    pub version: u32,
    pub vorschau: u32,
    pub duplexDruck: u32,
    pub pdfName: *const byteChar,
    pub fussText: *const ::std::os::raw::c_char,
    pub pdfCallback: EricPdfCallback,
    pub pdfCallbackBenutzerdaten: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_eric_druck_parameter_t() {
    const UNINIT: ::std::mem::MaybeUninit<eric_druck_parameter_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<eric_druck_parameter_t>(),
        48usize,
        concat!("Size of: ", stringify!(eric_druck_parameter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<eric_druck_parameter_t>(),
        8usize,
        concat!("Alignment of ", stringify!(eric_druck_parameter_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(eric_druck_parameter_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vorschau) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(eric_druck_parameter_t),
            "::",
            stringify!(vorschau)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duplexDruck) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(eric_druck_parameter_t),
            "::",
            stringify!(duplexDruck)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdfName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(eric_druck_parameter_t),
            "::",
            stringify!(pdfName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fussText) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(eric_druck_parameter_t),
            "::",
            stringify!(fussText)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdfCallback) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(eric_druck_parameter_t),
            "::",
            stringify!(pdfCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdfCallbackBenutzerdaten) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(eric_druck_parameter_t),
            "::",
            stringify!(pdfCallbackBenutzerdaten)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eric_verschluesselungs_parameter_t {
    pub version: u32,
    pub zertifikatHandle: EricZertifikatHandle,
    pub pin: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_eric_verschluesselungs_parameter_t() {
    const UNINIT: ::std::mem::MaybeUninit<eric_verschluesselungs_parameter_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<eric_verschluesselungs_parameter_t>(),
        16usize,
        concat!("Size of: ", stringify!(eric_verschluesselungs_parameter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<eric_verschluesselungs_parameter_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(eric_verschluesselungs_parameter_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(eric_verschluesselungs_parameter_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zertifikatHandle) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(eric_verschluesselungs_parameter_t),
            "::",
            stringify!(zertifikatHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pin) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(eric_verschluesselungs_parameter_t),
            "::",
            stringify!(pin)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eric_zertifikat_parameter_t {
    pub version: u32,
    pub name: *const ::std::os::raw::c_char,
    pub land: *const ::std::os::raw::c_char,
    pub ort: *const ::std::os::raw::c_char,
    pub adresse: *const ::std::os::raw::c_char,
    pub email: *const ::std::os::raw::c_char,
    pub organisation: *const ::std::os::raw::c_char,
    pub abteilung: *const ::std::os::raw::c_char,
    pub beschreibung: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_eric_zertifikat_parameter_t() {
    const UNINIT: ::std::mem::MaybeUninit<eric_zertifikat_parameter_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<eric_zertifikat_parameter_t>(),
        72usize,
        concat!("Size of: ", stringify!(eric_zertifikat_parameter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<eric_zertifikat_parameter_t>(),
        8usize,
        concat!("Alignment of ", stringify!(eric_zertifikat_parameter_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(eric_zertifikat_parameter_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(eric_zertifikat_parameter_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).land) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(eric_zertifikat_parameter_t),
            "::",
            stringify!(land)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ort) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(eric_zertifikat_parameter_t),
            "::",
            stringify!(ort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adresse) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(eric_zertifikat_parameter_t),
            "::",
            stringify!(adresse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).email) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(eric_zertifikat_parameter_t),
            "::",
            stringify!(email)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).organisation) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(eric_zertifikat_parameter_t),
            "::",
            stringify!(organisation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abteilung) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(eric_zertifikat_parameter_t),
            "::",
            stringify!(abteilung)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).beschreibung) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(eric_zertifikat_parameter_t),
            "::",
            stringify!(beschreibung)
        )
    );
}
#[doc = " Fehler, der zum Programmabbruch führt."]
pub const eric_log_level_t_ERIC_LOG_ERROR: eric_log_level_t = 4;
#[doc = " Hinweise auf Zustände, die zu Fehlern führen können."]
pub const eric_log_level_t_ERIC_LOG_WARN: eric_log_level_t = 3;
#[doc = " Grobe Informationen über den Programmablauf und Werte."]
pub const eric_log_level_t_ERIC_LOG_INFO: eric_log_level_t = 2;
#[doc = " Feingranulare Informationen über den Programmablauf und Werte."]
pub const eric_log_level_t_ERIC_LOG_DEBUG: eric_log_level_t = 1;
#[doc = " Sehr feingranulare Informationen über den Programmablauf und Werte."]
pub const eric_log_level_t_ERIC_LOG_TRACE: eric_log_level_t = 0;
pub type eric_log_level_t = ::std::os::raw::c_uint;
pub type EricLogCallback = ::std::option::Option<
    unsafe extern "C" fn(
        kategorie: *const ::std::os::raw::c_char,
        loglevel: eric_log_level_t,
        nachricht: *const ::std::os::raw::c_char,
        benutzerdaten: *mut ::std::os::raw::c_void,
    ),
>;
pub const ERIC_FORTSCHRITTCALLBACK_ID_EINLESEN: _bindgen_ty_1 = 10;
pub const ERIC_FORTSCHRITTCALLBACK_ID_VORBEREITEN: _bindgen_ty_1 = 20;
pub const ERIC_FORTSCHRITTCALLBACK_ID_VALIDIEREN: _bindgen_ty_1 = 30;
pub const ERIC_FORTSCHRITTCALLBACK_ID_SENDEN: _bindgen_ty_1 = 40;
pub const ERIC_FORTSCHRITTCALLBACK_ID_DRUCKEN: _bindgen_ty_1 = 50;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub type EricFortschrittCallback = ::std::option::Option<
    unsafe extern "C" fn(id: u32, pos: u32, max: u32, benutzerdaten: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn EricBearbeiteVorgang(
        datenpuffer: *const ::std::os::raw::c_char,
        datenartVersion: *const ::std::os::raw::c_char,
        bearbeitungsFlags: u32,
        druckParameter: *const eric_druck_parameter_t,
        cryptoParameter: *const eric_verschluesselungs_parameter_t,
        transferHandle: *mut EricTransferHandle,
        rueckgabeXmlPuffer: EricRueckgabepufferHandle,
        serverantwortXmlPuffer: EricRueckgabepufferHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricBeende() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricChangePassword(
        psePath: *const byteChar,
        oldPin: *const byteChar,
        newPin: *const byteChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricPruefeBuFaNummer(steuernummer: *const byteChar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricCheckXML(
        xml: *const ::std::os::raw::c_char,
        datenartVersion: *const ::std::os::raw::c_char,
        fehlertextPuffer: EricRueckgabepufferHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricCloseHandleToCertificate(hToken: EricZertifikatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricCreateKey(
        pin: *const byteChar,
        pfad: *const byteChar,
        zertifikatInfo: *const eric_zertifikat_parameter_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricCreateTH(
        xml: *const ::std::os::raw::c_char,
        verfahren: *const ::std::os::raw::c_char,
        datenart: *const ::std::os::raw::c_char,
        vorgang: *const ::std::os::raw::c_char,
        testmerker: *const ::std::os::raw::c_char,
        herstellerId: *const ::std::os::raw::c_char,
        datenLieferant: *const ::std::os::raw::c_char,
        versionClient: *const ::std::os::raw::c_char,
        publicKey: *const byteChar,
        xmlRueckgabePuffer: EricRueckgabepufferHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricCreateUUID(uuidRueckgabePuffer: EricRueckgabepufferHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricDekodiereDaten(
        zertifikatHandle: EricZertifikatHandle,
        pin: *const byteChar,
        base64Eingabe: *const byteChar,
        rueckgabePuffer: EricRueckgabepufferHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricEinstellungAlleZuruecksetzen() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricEinstellungLesen(
        name: *const ::std::os::raw::c_char,
        rueckgabePuffer: EricRueckgabepufferHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricEinstellungSetzen(
        name: *const ::std::os::raw::c_char,
        wert: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricEinstellungZuruecksetzen(
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricEntladePlugins() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricFormatEWAz(
        ewAzElster: *const byteChar,
        ewAzBescheidPuffer: EricRueckgabepufferHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricFormatStNr(
        eingabeSteuernummer: *const byteChar,
        rueckgabePuffer: EricRueckgabepufferHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricGetAuswahlListen(
        datenartVersion: *const ::std::os::raw::c_char,
        feldkennung: *const ::std::os::raw::c_char,
        rueckgabeXmlPuffer: EricRueckgabepufferHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricGetErrormessagesFromXMLAnswer(
        xml: *const ::std::os::raw::c_char,
        transferticketPuffer: EricRueckgabepufferHandle,
        returncodeTHPuffer: EricRueckgabepufferHandle,
        fehlertextTHPuffer: EricRueckgabepufferHandle,
        returncodesUndFehlertexteNDHXmlPuffer: EricRueckgabepufferHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricGetHandleToCertificate(
        hToken: *mut EricZertifikatHandle,
        iInfoPinSupport: *mut u32,
        pathToKeystore: *const byteChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricGetPinStatus(
        hToken: EricZertifikatHandle,
        pinStatus: *mut u32,
        keyType: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricGetPublicKey(
        cryptoParameter: *const eric_verschluesselungs_parameter_t,
        rueckgabePuffer: EricRueckgabepufferHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricHoleFehlerText(
        fehlerkode: ::std::os::raw::c_int,
        rueckgabePuffer: EricRueckgabepufferHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricHoleFinanzaemter(
        finanzamtLandNummer: *const byteChar,
        rueckgabeXmlPuffer: EricRueckgabepufferHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricHoleFinanzamtLandNummern(
        rueckgabeXmlPuffer: EricRueckgabepufferHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricHoleFinanzamtsdaten(
        bufaNr: *const byteChar,
        rueckgabeXmlPuffer: EricRueckgabepufferHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricHoleTestfinanzaemter(
        rueckgabeXmlPuffer: EricRueckgabepufferHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricHoleZertifikatEigenschaften(
        hToken: EricZertifikatHandle,
        pin: *const byteChar,
        rueckgabeXmlPuffer: EricRueckgabepufferHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricHoleZertifikatFingerabdruck(
        cryptoParameter: *const eric_verschluesselungs_parameter_t,
        fingerabdruckPuffer: EricRueckgabepufferHandle,
        signaturPuffer: EricRueckgabepufferHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricInitialisiere(
        pluginPfad: *const byteChar,
        logPfad: *const byteChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricMakeElsterStnr(
        steuernrBescheid: *const byteChar,
        landesnr: *const byteChar,
        bundesfinanzamtsnr: *const byteChar,
        steuernrPuffer: EricRueckgabepufferHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricMakeElsterEWAz(
        ewAzBescheid: *const byteChar,
        landeskuerzel: *const byteChar,
        ewAzElsterPuffer: EricRueckgabepufferHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricPruefeBIC(bic: *const byteChar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricPruefeIBAN(iban: *const byteChar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricPruefeEWAz(einheitswertAz: *const byteChar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricPruefeIdentifikationsMerkmal(steuerId: *const byteChar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricPruefeSteuernummer(steuernummer: *const byteChar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricPruefeZertifikatPin(
        pathToKeystore: *const byteChar,
        pin: *const byteChar,
        keyType: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricRegistriereFortschrittCallback(
        funktion: EricFortschrittCallback,
        benutzerdaten: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricRegistriereGlobalenFortschrittCallback(
        funktion: EricFortschrittCallback,
        benutzerdaten: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricRegistriereLogCallback(
        funktion: EricLogCallback,
        schreibeEricLogDatei: u32,
        benutzerdaten: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricRueckgabepufferErzeugen() -> EricRueckgabepufferHandle;
}
extern "C" {
    pub fn EricRueckgabepufferFreigeben(handle: EricRueckgabepufferHandle)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricRueckgabepufferInhalt(
        handle: EricRueckgabepufferHandle,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn EricRueckgabepufferLaenge(handle: EricRueckgabepufferHandle) -> u32;
}
extern "C" {
    pub fn EricSystemCheck() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EricVersion(rueckgabeXmlPuffer: EricRueckgabepufferHandle) -> ::std::os::raw::c_int;
}
